name: üîÑ Auto-Regenerate pnpm lockfile on conflict

on:
  # pull_request:
  #   types: [synchronize, opened, reopened]
  workflow_dispatch:
    inputs:
      pr_branch:
        description: 'PR branch to run on (e.g., username/branch-name)'
        required: true
        type: string
        
# How to manually trigger this workflow for a specific PR:
# gh workflow run auto-regenerate-lockfile.yml -R mdxld/mdx -r <branch-name> -f pr_branch=<branch-name>
# Example: gh workflow run auto-regenerate-lockfile.yml -R mdxld/mdx -r devin/1748107177-reveal-mdxui -f pr_branch=devin/1748107177-reveal-mdxui

permissions:
  contents: write    # needed to push back to PR branches

jobs:
  regen-on-conflict:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pr_branch || github.head_ref }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install pnpm CLI
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.6

      - name: Check if lockfile exists
        id: lockfile-check
        run: |
          if [ ! -f pnpm-lock.yaml ]; then
            echo "üîß pnpm-lock.yaml is missing, will create new one"
            echo "missing=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ pnpm-lock.yaml exists"
            echo "missing=false" >> $GITHUB_OUTPUT
          fi

      - name: Create new lockfile if missing
        if: steps.lockfile-check.outputs.missing == 'true'
        run: |
          echo "üîß Creating new pnpm-lock.yaml from scratch"
          pnpm install --frozen-lockfile=false
          
          # Commit the new lockfile
          if [ -f pnpm-lock.yaml ]; then
            echo "‚úèÔ∏è Committing new pnpm-lock.yaml"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add pnpm-lock.yaml
            git commit -m "üîí create new pnpm-lock.yaml"
            git push
          fi

      - name: Check for merge conflicts in lockfile
        id: conflict-check
        if: steps.lockfile-check.outputs.missing == 'false'
        run: |
          if git status --porcelain | grep -q "^UU pnpm-lock.yaml"; then
            echo "üîß Merge conflict detected in pnpm-lock.yaml"
            echo "conflict=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No merge conflicts in pnpm-lock.yaml"
            echo "conflict=false" >> $GITHUB_OUTPUT
          fi

      - name: Resolve lockfile merge conflict
        if: steps.lockfile-check.outputs.missing == 'false' && steps.conflict-check.outputs.conflict == 'true'
        run: |
          echo "üîß Resolving pnpm-lock.yaml merge conflict"
          git checkout --theirs pnpm-lock.yaml || rm -f pnpm-lock.yaml
          git add pnpm-lock.yaml || echo "Lockfile removed"
          
          # Pull latest from base branch to get clean lockfile
          # For workflow_dispatch, we need to use 'main' as the base branch
          git fetch origin ${{ github.event_name == 'workflow_dispatch' && 'main' || github.base_ref }}
          git checkout origin/${{ github.event_name == 'workflow_dispatch' && 'main' || github.base_ref }} -- pnpm-lock.yaml || echo "No lockfile in base branch"
          
          # Regenerate lockfile
          pnpm install --frozen-lockfile=false
          
          # Commit the resolved lockfile
          if ! git diff --quiet pnpm-lock.yaml; then
            echo "‚úèÔ∏è Committing resolved pnpm-lock.yaml"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add pnpm-lock.yaml
            git commit -m "üîí resolve pnpm-lock.yaml merge conflict"
            git push
          fi

      - name: Validate lockfile integrity
        id: validate-lockfile
        if: steps.lockfile-check.outputs.missing == 'false' && steps.conflict-check.outputs.conflict == 'false'
        run: pnpm install --frozen-lockfile --filter=!voice
        continue-on-error: true

      - name: Regenerate & commit lockfile if conflict
        if: steps.lockfile-check.outputs.missing == 'false' && steps.conflict-check.outputs.conflict == 'false' && steps.validate-lockfile.outcome == 'failure'
        run: |
          echo "üîß Lockfile conflict detected‚Äîrerunning pnpm install"
          pnpm install --frozen-lockfile=false
          
          # Only commit if the lockfile actually changed
          if git diff --quiet pnpm-lock.yaml; then
            echo "‚úÖ Lockfile merged cleanly‚Äîno commit needed"
          else
            echo "‚úèÔ∏è Committing regenerated pnpm-lock.yaml"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add pnpm-lock.yaml
            git commit -m "üîí regenerate pnpm-lock.yaml after merge conflict"
            git push
          fi
