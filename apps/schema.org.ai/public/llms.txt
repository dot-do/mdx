# schema.org.ai - Complete Documentation

> This file contains the complete schema.org.ai documentation optimized for Large Language Model consumption.
> Source: https://schema.org.ai
> GitHub: https://github.com/mdxld/mdxld
> Generated: $(date +%Y-%m-%d)
> Format: Markdown

================================================================================
TABLE OF CONTENTS
================================================================================

1. Introduction - What is schema.org.ai?
2. Type Definitions - 17 core AI-native types
3. JSON-LD Contexts - Vocabulary definitions

================================================================================

---
title: schema.org.ai
description: AI-native vocabulary for the semantic web
---

# schema.org.ai

**Structured vocabulary for AI agents, models, and knowledge systems**

schema.org.ai extends [Schema.org](https://schema.org) with AI-native types and properties, enabling structured representation of:

- **AI Agents** - Autonomous entities with goals, capabilities, and tools
- **Models** - LLMs, embeddings, fine-tuning, and multimodal AI
- **Tools** - Functions, APIs, and capabilities agents can invoke
- **Workflows** - Tasks, plans, and orchestration patterns
- **Knowledge** - Prompts, knowledge bases, and RAG systems
- **Memory** - Conversations, messages, context, and recall

## Why schema.org.ai?

Modern AI systems need structured, machine-readable vocabulary to:

✅ **Describe agents** - Roles, capabilities, policies, and behavior
✅ **Catalog models** - Specifications, costs, capabilities, and limits
✅ **Document tools** - Parameters, schemas, and safety requirements
✅ **Track workflows** - Tasks, dependencies, and execution status
✅ **Manage knowledge** - Prompts, embeddings, and retrieval strategies
✅ **Preserve context** - Conversations, memory, and state

## Quick Start

### JSON-LD Context

```json
{
  "@context": "http://schema.org.ai/context/ai-context.jsonld",
  "@type": "Agent",
  "@id": "https://example.com/agents/support",
  "role": "customer-support",
  "capabilities": ["answer-questions", "troubleshoot-issues"],
  "model": "claude-3-5-sonnet-20241022",
  "systemPrompt": "You are a helpful customer support agent."
}
```

### MDXLD (YAML-LD)

```yaml
---
$context: http://schema.org.ai/context/ai-context.jsonld
$type: Agent
$id: https://example.com/agents/support
role: customer-support
capabilities:
  - answer-questions
  - troubleshoot-issues
model: claude-3-5-sonnet-20241022
systemPrompt: You are a helpful customer support agent.
---

# Customer Support Agent

Autonomous agent for handling customer inquiries.
```

## Core Entity Types

### Agents & Teams

- **[Agent](/types/Agent)** - Autonomous AI entity with tools and goals
- **[AgentTeam](/types/AgentTeam)** - Coordinated team of agents
- **[Skill](/types/Skill)** - Specific capability an agent possesses
- **[Policy](/types/Policy)** - Rule governing agent behavior

### Models & Training

- **[Model](/types/Model)** - AI/ML model for inference or generation
- **[Embedding](/types/Embedding)** - Model for vector representations
- **[FineTuning](/types/FineTuning)** - Model customization process

### Tools & Functions

- **[Tool](/types/Tool)** - Function or API agent can invoke

### Workflows & Execution

- **[Task](/types/Task)** - Discrete unit of work
- **[Plan](/types/Plan)** - Structured sequence of tasks

### Knowledge & Prompts

- **[KnowledgeBase](/types/KnowledgeBase)** - Queryable knowledge collection
- **[Prompt](/types/Prompt)** - Template for AI interaction
- **[PromptChain](/types/PromptChain)** - Sequence of prompts

### Memory & Context

- **[Memory](/types/Memory)** - Stored knowledge or experience
- **[Context](/types/Context)** - Environmental information
- **[Conversation](/types/Conversation)** - Thread of messages
- **[Message](/types/Message)** - Single message in conversation

## Examples

### AI Agent Definition

```yaml
$type: Agent
role: code-reviewer
capabilities:
  - analyze-code-quality
  - detect-bugs
  - suggest-improvements
tools:
  - static-analysis
  - test-runner
model: claude-3-7-sonnet-20250219
temperature: 0.3
autonomyLevel: fully-autonomous
```

### AI Model Specification

```yaml
$type: Model
modelType: llm
modelFamily: Claude
provider: Anthropic
contextWindowSize: 200000
functionCalling: true
structuredOutput: true
costPerInputToken: 0.003
costPerOutputToken: 0.015
```

### Tool Definition

```yaml
$type: Tool
toolType: api
apiEndpoint: https://api.search.com/v1/search
apiMethod: POST
parameters:
  query: string
  limit: integer
authentication: api-key
requiresApproval: false
dangerLevel: safe
```

## Integration

schema.org.ai integrates seamlessly with:

- **[MDXLD](https://mdxld.org)** - MDX with linked data frontmatter
- **[Schema.org](https://schema.org)** - Web vocabulary foundation
- **JSON-LD** - Standard linked data format
- **Knowledge graphs** - Semantic data representation
- **Vector databases** - Embeddings and semantic search
- **AI frameworks** - LangChain, LlamaIndex, Mastra, etc.

## Specification

Read the full specification:

- **[Formal Specification](/spec)** - Complete vocabulary definition
- **[Type Reference](/types)** - All 38 entity types
- **[Property Reference](/properties)** - All 60+ properties
- **[Examples](/examples)** - Real-world usage patterns

## Community

- **GitHub**: [github.com/mdxld/mdxld](https://github.com/mdxld/mdxld)
- **Discord**: [discord.gg/mdxld](https://discord.gg/mdxld)
- **Twitter**: [@mdxld](https://twitter.com/mdxld)

## License

MIT - schema.org.ai is open source and freely available for use in any project.

================================================================================\n# TYPE DEFINITIONS\n================================================================================\n
---
$id: https://schema.org.ai/Agent
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/agents
label: Agent
comment: An autonomous AI agent that can perform tasks, use tools, and make decisions
subClassOf:
  - http://schema.org.ai/vocab#AIEntity
  - http://schema.org/SoftwareApplication
properties:
  role: string
  capabilities: array
  tools: array
  model: Agent.Model
  systemPrompt: string
  temperature: number
  maxTokens: integer
  topP: number
  goals: array
  policies: array
  skills: array
  team: Agent.AgentTeam?
  autonomyLevel: string
  humanInTheLoop: boolean
  escalationPolicy: Policy?
  memoryType: string
  contextWindow: integer
  learningEnabled: boolean
---

# Agent

An **Agent** is an autonomous AI entity that can perform tasks, use tools, and make decisions. Agents have capabilities, follow policies, and can work independently or as part of a team.

## Key Characteristics

- **Autonomous**: Can operate independently with varying levels of human oversight
- **Tool-enabled**: Can invoke external tools and APIs
- **Goal-oriented**: Works toward specific objectives
- **Adaptive**: Can learn from interactions and improve over time

## Properties

### Core Properties

- **role**: The primary function or responsibility of the agent
- **capabilities**: Array of skills or abilities the agent possesses
- **tools**: External tools the agent can invoke
- **model**: The AI model powering the agent's intelligence

### Behavior Configuration

- **systemPrompt**: Instructions defining the agent's behavior and personality
- **temperature**: Controls randomness in responses (0.0-2.0)
- **maxTokens**: Maximum length of generated responses
- **topP**: Nucleus sampling parameter (0.0-1.0)

### Goals & Governance

- **goals**: Objectives the agent is designed to achieve
- **policies**: Rules and guidelines governing behavior
- **autonomyLevel**: Level of independence (supervised, semi-autonomous, fully-autonomous)
- **humanInTheLoop**: Whether human approval is required

### Memory & Learning

- **memoryType**: Type of memory system (episodic, semantic, procedural)
- **contextWindow**: Size of context window in tokens
- **learningEnabled**: Whether agent can learn from interactions

## Examples

### Customer Support Agent

```yaml
$type: Agent
role: customer-support
capabilities:
  - answer-questions
  - troubleshoot-issues
  - escalate-to-human
tools:
  - knowledge-base-search
  - ticket-system-api
model: claude-3-5-sonnet-20241022
systemPrompt: |
  You are a helpful customer support agent. Be empathetic,
  clear, and solution-oriented.
autonomyLevel: semi-autonomous
humanInTheLoop: true
```

### Code Review Agent

```yaml
$type: Agent
role: code-reviewer
capabilities:
  - analyze-code-quality
  - detect-bugs
  - suggest-improvements
tools:
  - static-analysis
  - test-runner
  - git-api
model: claude-3-7-sonnet-20250219
systemPrompt: |
  Review code for quality, security, and best practices.
  Provide constructive feedback.
autonomyLevel: fully-autonomous
humanInTheLoop: false
```

## Related Types

- **AgentTeam**: Coordinated group of agents
- **Skill**: Specific capability an agent possesses
- **Policy**: Rule governing agent behavior
- **Tool**: External capability agent can invoke
- **Model**: AI model powering the agent
\n\n
---
$id: https://schema.org.ai/AgenticAction
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AgenticAction
comment: An action performed by an AI agent autonomously
subClassOf:
  - http://schema.org/Action
  - http://schema.org.ai/vocab#AIEntity
properties:
  agent: Agent
  toolsUsed: array
  reasoning: string
  confidenceScore: number
  requiresApproval: boolean
  approved: boolean
  approvedBy: Person?
---

# AgenticAction

An **AgenticAction** represents an action performed autonomously by an AI agent, potentially using tools and reasoning.

## Properties

- **agent**: The AI agent that performed the action
- **toolsUsed**: Tools invoked during action execution
- **reasoning**: Agent's reasoning or thought process
- **confidenceScore**: Confidence in action outcome (0.0-1.0)
- **requiresApproval**: Whether human approval was required
- **approved**: Whether action was approved
- **approvedBy**: Person who approved the action (if applicable)

## Examples

```yaml
$type: AgenticAction
agent: customer-support-agent
name: Send refund confirmation email
toolsUsed:
  - email-api
  - customer-database
reasoning: Customer requested refund within 30-day window. Policy allows automatic approval.
confidenceScore: 0.95
requiresApproval: false
```

## Related Types

- **Agent**: Entity performing the action
- **Tool**: Tools used during execution
- **Task**: Related task if part of workflow
\n\n
---
$id: https://schema.org.ai/AgentTeam
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/agents
label: AgentTeam
comment: A coordinated team of AI agents working together toward common goals
subClassOf:
  - http://schema.org.ai/vocab#Agent
properties:
  teammates: array
  coordinator: Agent
  goals: array
  policies: array
  collaboration: string
---

# AgentTeam

An **AgentTeam** is a coordinated group of AI agents that work together toward common objectives. Teams enable specialization, parallel execution, and collective problem-solving.

## Key Characteristics

- **Coordinated**: Agents communicate and collaborate
- **Specialized**: Each agent has specific roles and capabilities
- **Goal-aligned**: All agents work toward shared objectives
- **Scalable**: Can add or remove agents dynamically

## Properties

- **teammates**: Array of agents in the team
- **coordinator**: Agent responsible for orchestration
- **goals**: Shared objectives
- **policies**: Team-wide governance rules
- **collaboration**: Strategy for coordination (hierarchical, flat, specialized)

## Examples

### Software Development Team

```yaml
$type: AgentTeam
teammates:
  - frontend-agent
  - backend-agent
  - qa-agent
  - devops-agent
coordinator: tech-lead-agent
goals:
  - build-mvp
  - maintain-quality
collaboration: specialized
```

## Related Types

- **Agent**: Individual team member
- **Policy**: Team governance rules
\n\n
---
$id: https://schema.org.ai/AIApplication
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIApplication
comment: A software application powered by AI capabilities
subClassOf:
  - http://schema.org/SoftwareApplication
  - http://schema.org.ai/vocab#AIEntity
properties:
  aiCapabilities: array
  aiModels: array
  aiProvider: Organization
  autonomyLevel: string
  humanInTheLoop: boolean
  privacyPolicy: string
  ethicsGuidelines: string
---

# AIApplication

An **AIApplication** is a software application that leverages AI capabilities to provide intelligent features and functionality.

## Properties

- **aiCapabilities**: AI capabilities provided by the application
- **aiModels**: AI models used by the application
- **aiProvider**: Organization providing the AI capabilities
- **autonomyLevel**: Level of AI autonomy (supervised, semi-autonomous, autonomous)
- **humanInTheLoop**: Whether human oversight is required
- **privacyPolicy**: Privacy policy for AI data handling
- **ethicsGuidelines**: Ethical guidelines for AI usage

## Examples

```yaml
$type: AIApplication
name: AI Writing Assistant
aiCapabilities:
  - text-generation
  - grammar-correction
  - style-suggestions
aiModels:
  - gpt-4
  - claude-3-opus
autonomyLevel: supervised
humanInTheLoop: true
```

## Related Types

- **Agent**: AI agent that may power the application
- **Model**: AI models used by the application
\n\n
---
$id: https://schema.org.ai/AIBenchmark
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIBenchmark
comment: A standardized benchmark for evaluating AI capabilities
subClassOf:
  - http://schema.org/QuantitativeValue
  - http://schema.org.ai/vocab#AIEntity
properties:
  name: string
  task: string
  dataset: BenchmarkDataset
  metric: string
  baseline: number
---

# AIBenchmark

**AIBenchmark** represents a standardized test for comparing AI model performance on specific tasks.

## Examples

```yaml
$type: AIBenchmark
name: MMLU
task: multitask-language-understanding
dataset: mmlu-benchmark
metric: accuracy
baseline: 0.25
```
\n\n
---
$id: https://schema.org.ai/AICapability
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AICapability
comment: A specific AI capability or feature
subClassOf:
  - http://schema.org/Thing
  - http://schema.org.ai/vocab#AIEntity
properties:
  capabilityType: string
  description: string
  models: array
  accuracy: number
  latency: integer
---

# AICapability

**AICapability** represents a specific AI capability such as image recognition, text generation, or speech synthesis.

## Examples

```yaml
$type: AICapability
name: Image classification
capabilityType: computer-vision
description: Classify images into 1000 categories
models:
  - resnet-50
  - vit-large
accuracy: 0.92
latency: 50
```
\n\n
---
$id: https://schema.org.ai/AIDeployment
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIDeployment
comment: Deployment of an AI model to production
subClassOf:
  - http://schema.org/Action
  - http://schema.org.ai/vocab#AIEntity
properties:
  model: Model
  environment: string
  deployedAt: dateTime
  version: string
  status: string
  endpoint: string
---

# AIDeployment

**AIDeployment** represents the deployment of an AI model to a production environment.

## Examples

```yaml
$type: AIDeployment
model: claude-3-opus-20240229
environment: production
deployedAt: 2025-10-01T00:00:00Z
version: 1.2.0
status: active
endpoint: https://api.example.com/v1/chat
```
\n\n
---
$id: https://schema.org.ai/AIEvaluation
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIEvaluation
comment: An evaluation of AI model performance
subClassOf:
  - http://schema.org/Review
  - http://schema.org.ai/vocab#AIEntity
properties:
  model: Model
  dataset: Dataset
  metrics: array
  score: number
  evaluatedAt: dateTime
---

# AIEvaluation

**AIEvaluation** documents the performance evaluation of an AI model on specific datasets and metrics.

## Examples

```yaml
$type: AIEvaluation
model: claude-3-opus
dataset: mmlu-benchmark
metrics:
  - name: accuracy
    value: 0.867
  - name: f1-score
    value: 0.854
score: 0.867
evaluatedAt: 2025-10-01T00:00:00Z
```
\n\n
---
$id: https://schema.org.ai/AIExperiment
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIExperiment
comment: An AI research or development experiment
subClassOf:
  - http://schema.org/Action
  - http://schema.org.ai/vocab#AIEntity
properties:
  hypothesis: string
  methodology: string
  model: Model
  dataset: Dataset
  results: object
  conclusion: string
---

# AIExperiment

**AIExperiment** documents a research or development experiment involving AI models, datasets, or algorithms.

## Examples

```yaml
$type: AIExperiment
name: Temperature impact on creativity
hypothesis: Higher temperature values increase output creativity
methodology: Generate 100 stories at different temperature settings
model: gpt-4
results:
  temperature_0.7: 65
  temperature_1.0: 82
  temperature_1.5: 91
conclusion: Creativity scores increase with temperature up to 1.5
```
\n\n
---
$id: https://schema.org.ai/AIMetric
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIMetric
comment: A metric for measuring AI performance or behavior
subClassOf:
  - http://schema.org/PropertyValue
  - http://schema.org.ai/vocab#AIEntity
properties:
  metricName: string
  value: number
  unit: string
  timestamp: dateTime
---

# AIMetric

**AIMetric** represents a measurable aspect of AI performance such as accuracy, latency, or throughput.

## Examples

```yaml
$type: AIMetric
metricName: accuracy
value: 0.92
unit: percentage
timestamp: 2025-10-02T10:00:00Z
```
\n\n
---
$id: https://schema.org.ai/AIModelCard
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIModelCard
comment: Documentation describing an AI model's characteristics and limitations
subClassOf:
  - http://schema.org/TechArticle
  - http://schema.org.ai/vocab#AIEntity
properties:
  model: Model
  intendedUse: string
  limitations: array
  biases: array
  ethicalConsiderations: array
  performance: object
  trainingData: Dataset
---

# AIModelCard

**AIModelCard** provides comprehensive documentation about an AI model including its capabilities, limitations, and ethical considerations.

## Examples

```yaml
$type: AIModelCard
model: gpt-4
intendedUse: General-purpose language understanding and generation
limitations:
  - Knowledge cutoff at April 2023
  - May generate plausible but incorrect information
biases:
  - Possible gender bias in occupational contexts
  - Cultural bias toward Western perspectives
ethicalConsiderations:
  - Should not be used for medical diagnosis
  - Requires human oversight for high-stakes decisions
```
\n\n
---
$id: https://schema.org.ai/AIMonitoring
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIMonitoring
comment: Monitoring of AI model performance in production
subClassOf:
  - http://schema.org/Action
  - http://schema.org.ai/vocab#AIEntity
properties:
  model: Model
  metrics: array
  alerts: array
  period: string
  lastChecked: dateTime
---

# AIMonitoring

**AIMonitoring** represents ongoing monitoring of AI models in production to track performance, detect issues, and ensure quality.

## Examples

```yaml
$type: AIMonitoring
model: content-moderation-model
metrics:
  - accuracy
  - latency
  - throughput
  - error-rate
alerts:
  - type: accuracy-drop
    threshold: 0.05
    action: notify-team
period: realtime
lastChecked: 2025-10-02T10:30:00Z
```
\n\n
---
$id: https://schema.org.ai/AIService
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIService
comment: A service providing AI capabilities via API
subClassOf:
  - http://schema.org/Service
  - http://schema.org.ai/vocab#AIEntity
properties:
  apiEndpoint: string
  authentication: string
  pricing: object
  rateLimit: integer
  capabilities: array
  models: array
---

# AIService

**AIService** represents an API service that provides AI capabilities to applications.

## Examples

```yaml
$type: AIService
name: OpenAI API
apiEndpoint: https://api.openai.com/v1
authentication: api-key
capabilities:
  - text-generation
  - embeddings
  - image-generation
models:
  - gpt-4
  - dall-e-3
rateLimit: 10000
```
\n\n
---
$id: https://schema.org.ai/AIWorkflow
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: AIWorkflow
comment: A workflow or process involving AI agents and tasks
subClassOf:
  - http://schema.org/HowTo
  - http://schema.org.ai/vocab#AIEntity
properties:
  steps: array
  agents: array
  tools: array
  estimatedTime: integer
  successRate: number
---

# AIWorkflow

An **AIWorkflow** represents a multi-step process involving AI agents, tools, and human collaboration.

## Examples

```yaml
$type: AIWorkflow
name: Content creation workflow
steps:
  - research-topic
  - generate-outline
  - write-draft
  - review-and-edit
  - publish
agents:
  - research-agent
  - writer-agent
  - editor-agent
estimatedTime: 3600
successRate: 0.88
```
\n\n
---
$id: https://schema.org.ai/BenchmarkDataset
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: BenchmarkDataset
comment: A standardized dataset for evaluating and comparing AI models
subClassOf:
  - http://schema.org/Dataset
  - http://schema.org.ai/vocab#AIEntity
properties:
  dataType: string
  size: integer
  task: string
  metrics: array
  leaderboard: string
---

# BenchmarkDataset

A **BenchmarkDataset** is a standardized evaluation dataset used to compare AI model performance.

## Examples

```yaml
$type: BenchmarkDataset
name: MMLU (Massive Multitask Language Understanding)
task: question-answering
size: 15908
metrics:
  - accuracy
  - f1-score
leaderboard: https://huggingface.co/spaces/open-llm-leaderboard
```
\n\n
---
$id: https://schema.org.ai/Context
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/memory
label: Context
comment: Contextual information available to an agent during execution
subClassOf:
  - http://schema.org.ai/vocab#AIEntity
properties:
  contextType: string
  contextData: string
  scope: string
  expiresAt: dateTime?
  priority: integer
---

# Context

**Context** represents environmental, session, or domain-specific information available to an AI agent during execution.

## Properties

- **contextType**: Type (user, session, conversation, global, domain)
- **contextData**: Context information as JSON
- **scope**: Scope (request, session, global)
- **expiresAt**: When context expires (optional)
- **priority**: Priority for context selection

## Examples

```yaml
$type: Context
contextType: user
contextData:
  userId: user-12345
  preferences:
    language: en
    timezone: America/New_York
  subscription: premium
scope: session
priority: 1
```
\n\n
---
$id: https://schema.org.ai/Conversation
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/memory
label: Conversation
comment: A conversation thread between agents or between agent and human
subClassOf:
  - http://schema.org/Conversation
  - http://schema.org.ai/vocab#AIEntity
properties:
  messages: array
  participants: array
  startedAt: dateTime
  lastMessageAt: dateTime
  status: string
  title: string
  summary: string
  totalTokens: integer
---

# Conversation

A **Conversation** represents a threaded exchange of messages between AI agents and/or humans.

## Properties

- **messages**: Array of messages
- **participants**: Agents or users in conversation
- **startedAt**: Conversation start time
- **lastMessageAt**: Last message time
- **status**: Status (active, archived, completed)
- **title**: Conversation title
- **summary**: Auto-generated summary
- **totalTokens**: Total tokens used

## Examples

```yaml
$type: Conversation
title: Customer Support Session
participants:
  - support-agent
  - user-12345
startedAt: 2025-10-02T10:00:00Z
status: active
totalTokens: 2453
```
\n\n
---
$id: https://schema.org.ai/Embedding
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/models
label: Embedding
comment: A model that converts text or data into vector embeddings
subClassOf:
  - http://schema.org.ai/vocab#Model
properties:
  embeddingDimensions: integer
  embeddingModel: string
  provider: Organization
  maxInputTokens: integer
  costPer1MTokens: number
  batchSize: integer
---

# Embedding

An **Embedding** model converts text, images, or other data into dense vector representations for semantic search and similarity matching.

## Properties

- **embeddingDimensions**: Number of dimensions (e.g., 384, 768, 1536)
- **embeddingModel**: Model identifier
- **provider**: Organization providing the model
- **maxInputTokens**: Maximum input length
- **costPer1MTokens**: Cost per million tokens

## Examples

```yaml
$type: Embedding
embeddingModel: text-embedding-3-large
embeddingDimensions: 3072
provider: OpenAI
maxInputTokens: 8191
costPer1MTokens: 0.13
```
\n\n
---
$id: https://schema.org.ai/FineTuning
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/models
label: FineTuning
comment: Process of fine-tuning a model on custom data
subClassOf:
  - http://schema.org/Action
properties:
  baseModel: Model
  trainingData: Dataset
  hyperparameters: object
  epochs: integer
  batchSize: integer
  learningRate: number
  validationSplit: number
  status: string
  completedAt: dateTime
  metrics: object
---

# FineTuning

**FineTuning** is the process of adapting a pre-trained model to perform better on specific tasks or domains by training on custom data.

## Properties

- **baseModel**: Model being fine-tuned
- **trainingData**: Custom training dataset
- **hyperparameters**: Training configuration
- **epochs**: Number of training epochs
- **learningRate**: Learning rate
- **status**: Status (pending, training, completed, failed)
- **metrics**: Training metrics (loss, accuracy, etc.)

## Examples

```yaml
$type: FineTuning
baseModel: gpt-4o-mini
trainingData: customer-support-conversations
epochs: 3
learningRate: 0.0001
status: completed
metrics:
  loss: 0.23
  accuracy: 0.94
```
\n\n
---
$id: https://schema.org.ai/GeneratedArticle
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: GeneratedArticle
comment: An article generated by AI
subClassOf:
  - http://schema.org/Article
  - http://schema.org.ai/vocab#GeneratedWork
properties:
  generatedBy: Agent
  generatedAt: dateTime
  model: Model
  wordCount: integer
  readingTime: integer
---

# GeneratedArticle

A **GeneratedArticle** is an article (blog post, news article, etc.) generated by an AI system.

## Properties

Inherits all properties from **GeneratedWork** plus:

- **wordCount**: Number of words in the article
- **readingTime**: Estimated reading time in minutes

## Examples

```yaml
$type: GeneratedArticle
headline: 10 Tips for Better Sleep
generatedBy: content-agent
model: claude-3-opus-20240229
wordCount: 1200
readingTime: 5
humanEdited: true
humanVerified: true
```
\n\n
---
$id: https://schema.org.ai/GeneratedAudio
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: GeneratedAudio
comment: Audio content generated by AI
subClassOf:
  - http://schema.org/AudioObject
  - http://schema.org.ai/vocab#GeneratedWork
properties:
  generatedBy: Agent
  generatedAt: dateTime
  model: Model
  duration: integer
  voice: string
  language: string
---

# GeneratedAudio

**GeneratedAudio** represents audio (speech, music, sound effects) created by an AI model.

## Examples

```yaml
$type: GeneratedAudio
name: Podcast intro music
generatedBy: audio-agent
model: musicgen
duration: 15
prompt: Upbeat electronic intro music for tech podcast
```
\n\n
---
$id: https://schema.org.ai/GeneratedCode
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: GeneratedCode
comment: Source code generated by AI
subClassOf:
  - http://schema.org/SoftwareSourceCode
  - http://schema.org.ai/vocab#GeneratedWork
properties:
  generatedBy: Agent
  generatedAt: dateTime
  model: Model
  programmingLanguage: string
  linesOfCode: integer
  testCoverage: number
  passesTests: boolean
---

# GeneratedCode

**GeneratedCode** represents source code generated by an AI system.

## Properties

Inherits from **GeneratedWork** plus:

- **programmingLanguage**: Programming language (JavaScript, Python, etc.)
- **linesOfCode**: Number of lines of code
- **testCoverage**: Test coverage percentage (0.0-1.0)
- **passesTests**: Whether generated code passes tests

## Examples

```yaml
$type: GeneratedCode
name: User authentication function
generatedBy: code-agent
model: claude-3-7-sonnet-20250219
programmingLanguage: TypeScript
linesOfCode: 45
testCoverage: 0.92
passesTests: true
humanVerified: true
```
\n\n
---
$id: https://schema.org.ai/GeneratedImage
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: GeneratedImage
comment: An image generated by AI
subClassOf:
  - http://schema.org/ImageObject
  - http://schema.org.ai/vocab#GeneratedWork
properties:
  generatedBy: Agent
  generatedAt: dateTime
  model: Model
  width: integer
  height: integer
  style: string
---

# GeneratedImage

**GeneratedImage** represents an image created by an AI image generation model.

## Examples

```yaml
$type: GeneratedImage
name: Sunset over mountains
generatedBy: image-agent
model: dall-e-3
width: 1024
height: 1024
style: photorealistic
prompt: A vibrant sunset over snow-capped mountains
```
\n\n
---
$id: https://schema.org.ai/GeneratedVideo
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: GeneratedVideo
comment: A video generated by AI
subClassOf:
  - http://schema.org/VideoObject
  - http://schema.org.ai/vocab#GeneratedWork
properties:
  generatedBy: Agent
  generatedAt: dateTime
  model: Model
  duration: integer
  frameRate: integer
---

# GeneratedVideo

**GeneratedVideo** represents a video created by an AI video generation model.

## Examples

```yaml
$type: GeneratedVideo
name: Product demo video
generatedBy: video-agent
model: sora
duration: 30
frameRate: 30
prompt: Professional product demonstration with smooth camera movements
```
\n\n
---
$id: https://schema.org.ai/GeneratedWork
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: GeneratedWork
comment: Creative work generated by AI
subClassOf:
  - http://schema.org/CreativeWork
  - http://schema.org.ai/vocab#AIEntity
properties:
  generatedBy: Agent
  generatedAt: dateTime
  prompt: Prompt
  model: Model
  humanEdited: boolean
  humanVerified: boolean
  generationMetadata: object
---

# GeneratedWork

A **GeneratedWork** is any creative work (text, image, code, etc.) that was generated by an AI system.

## Properties

- **generatedBy**: AI agent or model that created the work
- **generatedAt**: Timestamp of generation
- **prompt**: Prompt used to generate the work
- **model**: AI model used for generation
- **humanEdited**: Whether a human edited the generated content
- **humanVerified**: Whether content has been verified by a human
- **generationMetadata**: Additional metadata (temperature, tokens, etc.)

## Examples

```yaml
$type: GeneratedWork
name: Product description for wireless headphones
generatedBy: content-agent
generatedAt: 2025-10-02T10:30:00Z
model: gpt-4
humanEdited: true
humanVerified: true
generationMetadata:
  temperature: 0.7
  tokensUsed: 250
```

## Subtypes

- **GeneratedArticle**: AI-generated article
- **GeneratedCode**: AI-generated source code
- **GeneratedImage**: AI-generated image
- **GeneratedVideo**: AI-generated video
- **GeneratedAudio**: AI-generated audio

## Related Types

- **Agent**: Entity that generated the work
- **Model**: Model used for generation
- **Prompt**: Input prompt
\n\n
---
$id: https://schema.org.ai/KnowledgeBase
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/knowledge
label: KnowledgeBase
comment: A collection of structured knowledge that agents can query and reference
subClassOf:
  - http://schema.org/Dataset
  - http://schema.org.ai/vocab#AIEntity
properties:
  knowledgeType: string
  knowledgeSource: string
  vectorStore: string
  indexStrategy: string
  chunkSize: integer
  chunkOverlap: integer
  searchTopK: integer
  rerankingModel: Model?
  documentCount: integer
  lastUpdated: dateTime
---

# KnowledgeBase

A **KnowledgeBase** is a structured collection of information that AI agents can search, retrieve, and use to ground their responses.

## Properties

- **knowledgeType**: Type (factual, procedural, conceptual, meta-cognitive)
- **knowledgeSource**: Source URL or location
- **vectorStore**: Vector database backend
- **indexStrategy**: Indexing approach (semantic, keyword, hybrid)
- **chunkSize**: Document chunk size
- **searchTopK**: Number of results to retrieve
- **rerankingModel**: Optional re-ranking model

## Examples

```yaml
$type: KnowledgeBase
knowledgeType: factual
knowledgeSource: https://docs.example.com
vectorStore: pinecone
indexStrategy: hybrid
chunkSize: 512
chunkOverlap: 128
searchTopK: 5
documentCount: 1250
```
\n\n
---
$id: https://schema.org.ai/Memory
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/memory
label: Memory
comment: Stored knowledge or experience that an agent can recall
subClassOf:
  - http://schema.org.ai/vocab#AIEntity
properties:
  memoryType: string
  memoryStore: string
  retrievalStrategy: string
  relevanceScore: number
  decayRate: number
  accessCount: integer
  lastAccessed: dateTime
  content: string
  embedding: array
  metadata: object
---

# Memory

**Memory** represents stored knowledge, experiences, or context that an AI agent can recall and utilize during execution.

## Properties

- **memoryType**: Type (short-term, long-term, episodic, semantic, procedural)
- **memoryStore**: Storage backend (vector-db, database, file, cache)
- **retrievalStrategy**: How retrieved (semantic, temporal, relevance)
- **relevanceScore**: Relevance score (0.0-1.0)
- **decayRate**: How quickly relevance decays
- **accessCount**: Times accessed
- **lastAccessed**: Last access timestamp

## Examples

```yaml
$type: Memory
memoryType: episodic
content: User prefers concise responses without preamble
relevanceScore: 0.95
memoryStore: vector-db
retrievalStrategy: semantic
```
\n\n
---
$id: https://schema.org.ai/Message
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/memory
label: Message
comment: A single message within a conversation
subClassOf:
  - http://schema.org/Message
  - http://schema.org.ai/vocab#AIEntity
properties:
  conversation: Conversation
  messageRole: string
  messageContent: string
  functionCall: string?
  functionResult: string?
  tokenCount: integer
  timestamp: dateTime
  inReplyTo: Message?
  attachments: array
---

# Message

A **Message** represents a single communication unit within a conversation, sent by an agent or human.

## Properties

- **conversation**: Parent conversation
- **messageRole**: Role (system, user, assistant, function)
- **messageContent**: Message text
- **functionCall**: Function call details (if applicable)
- **functionResult**: Function result (if applicable)
- **tokenCount**: Tokens in message
- **timestamp**: When sent
- **inReplyTo**: Message this replies to
- **attachments**: Attached files or data

## Examples

```yaml
$type: Message
conversation: conv-12345
messageRole: assistant
messageContent: I can help you with that. Let me search our knowledge base.
tokenCount: 15
timestamp: 2025-10-02T10:05:32Z
```
\n\n
---
$id: https://schema.org.ai/Model
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/models
label: Model
comment: An AI/ML model used for inference, generation, or embedding
subClassOf:
  - http://schema.org.ai/vocab#AIEntity
  - http://schema.org/SoftwareApplication
properties:
  modelType: string
  modelFamily: string
  provider: Organization
  contextWindowSize: integer
  inputTokenLimit: integer
  outputTokenLimit: integer
  trainingData: Dataset
  trainingCutoff: date
  finetuning: FineTuning?
  baseModel: Model?
  multimodal: boolean
  supportedModalities: array
  visionEnabled: boolean
  audioEnabled: boolean
  functionCalling: boolean
  structuredOutput: boolean
  reasoningModel: boolean
  costPerInputToken: number
  costPerOutputToken: number
  latencyMs: integer
  tokensPerSecond: integer
---

# Model

A **Model** represents an AI/ML model that powers agents, tools, and applications. Models can be used for text generation, embeddings, vision, audio, and multimodal tasks.

## Properties

### Core Properties

- **modelType**: Type (llm, embedding, vision, audio, multimodal)
- **modelFamily**: Family (GPT, Claude, Llama, Gemini)
- **provider**: Organization providing the model
- **contextWindowSize**: Max context window in tokens

### Capabilities

- **multimodal**: Supports multiple modalities
- **supportedModalities**: List of supported modalities
- **visionEnabled**: Can process images
- **audioEnabled**: Can process audio
- **functionCalling**: Supports tool/function calling
- **structuredOutput**: Can generate JSON
- **reasoningModel**: Uses chain-of-thought

### Performance & Cost

- **latencyMs**: Average latency
- **tokensPerSecond**: Generation speed
- **costPerInputToken**: Input cost per 1K tokens
- **costPerOutputToken**: Output cost per 1K tokens

## Examples

```yaml
$type: Model
modelType: llm
modelFamily: Claude
provider: Anthropic
contextWindowSize: 200000
functionCalling: true
structuredOutput: true
reasoningModel: true
costPerInputToken: 0.003
costPerOutputToken: 0.015
```
\n\n
---
$id: https://schema.org.ai/Plan
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/workflows
label: Plan
comment: A structured plan for achieving a goal through multiple tasks
subClassOf:
  - http://schema.org/PlanAction
  - http://schema.org.ai/vocab#AIEntity
properties:
  planType: string
  planStatus: string
  steps: array
  currentStep: Task?
  completedSteps: array
  objective: string
  successCriteria: array
  rollbackStrategy: string?
  createdAt: dateTime
  startedAt: dateTime?
  completedAt: dateTime?
  estimatedDuration: integer
  actualDuration: integer
---

# Plan

A **Plan** is a structured sequence of tasks designed to accomplish a specific goal or objective through coordinated execution.

## Properties

### Core Properties

- **planType**: Type (sequential, parallel, conditional, iterative)
- **planStatus**: Status (draft, active, paused, completed, failed)
- **objective**: Goal the plan is designed to achieve
- **successCriteria**: Criteria for determining success

### Execution

- **steps**: Tasks or steps in the plan
- **currentStep**: Current task being executed
- **completedSteps**: Steps already completed
- **rollbackStrategy**: How to rollback if plan fails

### Timing

- **createdAt**: When plan was created
- **startedAt**: When execution started
- **completedAt**: When execution finished
- **estimatedDuration**: Expected duration in seconds
- **actualDuration**: Actual duration in seconds

## Examples

### Sequential Plan

```yaml
$type: Plan
planType: sequential
objective: Build and deploy new feature
steps:
  - analyze-requirements
  - design-architecture
  - implement-code
  - write-tests
  - code-review
  - deploy-production
successCriteria:
  - all-tests-passing
  - code-review-approved
  - zero-production-errors
planStatus: active
currentStep: implement-code
```

### Conditional Plan

```yaml
$type: Plan
planType: conditional
objective: Process customer inquiry
steps:
  - classify-inquiry
  - route-to-specialist (if complex)
  - provide-automated-response (if simple)
  - escalate-to-human (if unsure)
successCriteria:
  - customer-satisfied
  - issue-resolved
rollbackStrategy: escalate-to-human
```

## Related Types

- **Task**: Individual step in the plan
- **Agent**: Entity executing the plan
\n\n
---
$id: https://schema.org.ai/Policy
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/agents
label: Policy
comment: A rule or guideline that governs agent behavior
subClassOf:
  - http://schema.org/Thing
properties:
  name: string
  description: string
  policyType: string
  rules: array
  enforcement: string
  priority: integer
---

# Policy

A **Policy** defines rules and guidelines that govern how agents behave, make decisions, and interact with systems and users.

## Properties

- **name**: Policy identifier
- **description**: What the policy governs
- **policyType**: Category (safety, privacy, compliance, operational)
- **rules**: Specific rules to enforce
- **enforcement**: How policy is enforced (blocking, warning, logging)
- **priority**: Policy priority for conflict resolution

## Examples

```yaml
$type: Policy
name: human-approval-required
description: Require human approval for high-risk actions
policyType: safety
rules:
  - no-data-deletion-without-approval
  - no-financial-transactions-without-approval
enforcement: blocking
priority: 1
```
\n\n
---
$id: https://schema.org.ai/Prompt
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/knowledge
label: Prompt
comment: A prompt template for AI model interaction
subClassOf:
  - http://schema.org.ai/vocab#AIEntity
properties:
  promptTemplate: string
  promptVariables: array
  promptType: string
  fewShotExamples: array
  chainOfThought: boolean
  thoughtProcess: string
  model: Model
  temperature: number
  maxTokens: integer
---

# Prompt

A **Prompt** is a template or instruction used to interact with AI models, guiding their behavior and output.

## Properties

- **promptTemplate**: Template string with variable placeholders
- **promptVariables**: Variables for interpolation
- **promptType**: Type (system, user, assistant, few-shot, chain-of-thought)
- **fewShotExamples**: Examples for few-shot learning
- **chainOfThought**: Uses reasoning steps
- **thoughtProcess**: Explicit reasoning

## Examples

```yaml
$type: Prompt
promptTemplate: |
  You are a {{role}}. {{instructions}}

  User: {{query}}
promptVariables:
  - role
  - instructions
  - query
promptType: system
chainOfThought: true
```
\n\n
---
$id: https://schema.org.ai/PromptChain
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/knowledge
label: PromptChain
comment: A sequence of prompts chained together for complex workflows
subClassOf:
  - http://schema.org.ai/vocab#Prompt
properties:
  prompts: array
  chainType: string
  nextPrompt: Prompt?
  previousPrompt: Prompt?
  branchCondition: string
  stopCondition: string
  maxIterations: integer
  aggregationStrategy: string
---

# PromptChain

A **PromptChain** connects multiple prompts in sequence to accomplish complex, multi-step reasoning or generation tasks.

## Properties

- **prompts**: Prompts in the chain
- **chainType**: Type (sequential, parallel, conditional, recursive)
- **branchCondition**: Condition for branching
- **stopCondition**: When to stop
- **maxIterations**: Max iterations for recursive chains
- **aggregationStrategy**: How to combine results

## Examples

```yaml
$type: PromptChain
chainType: sequential
prompts:
  - analyze-requirements
  - generate-plan
  - implement-solution
  - review-output
stopCondition: all-steps-complete
```
\n\n
---
$id: https://schema.org.ai/Skill
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/agents
label: Skill
comment: A specific capability or skill that an agent can perform
subClassOf:
  - http://schema.org/Thing
properties:
  name: string
  description: string
  category: string
  proficiencyLevel: number
  prerequisites: array
  examples: array
---

# Skill

A **Skill** represents a specific capability or ability that an AI agent possesses. Skills can be innate (from training) or acquired (through fine-tuning or tool access).

## Properties

- **name**: Name of the skill
- **description**: What the skill enables
- **category**: Domain or category (analysis, generation, transformation, execution)
- **proficiencyLevel**: Skill level (0.0-1.0)
- **prerequisites**: Other skills required to use this skill
- **examples**: Example demonstrations of the skill

## Examples

```yaml
$type: Skill
name: code-review
description: Analyze code for quality, bugs, and best practices
category: analysis
proficiencyLevel: 0.9
prerequisites:
  - programming-knowledge
  - pattern-recognition
```
\n\n
---
$id: https://schema.org.ai/Task
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/workflows
label: Task
comment: A discrete unit of work to be performed by an agent or system
subClassOf:
  - http://schema.org/Action
  - http://schema.org.ai/vocab#AIEntity
properties:
  taskType: string
  taskStatus: string
  taskPriority: string
  assignedTo: Agent
  dependencies: array
  subtasks: array
  parentTask: Task?
  estimatedDuration: integer
  actualDuration: integer
  deadline: dateTime?
  startedAt: dateTime?
  completedAt: dateTime?
  result: string?
  error: string?
  retryCount: integer
  maxRetries: integer
---

# Task

A **Task** is a discrete, actionable unit of work that can be assigned to an AI agent or system for execution.

## Properties

### Core Properties

- **taskType**: Type (generation, analysis, transformation, execution)
- **taskStatus**: Status (pending, in-progress, completed, failed, cancelled)
- **taskPriority**: Priority (low, medium, high, critical)
- **assignedTo**: Agent responsible for the task

### Structure

- **dependencies**: Tasks that must complete first
- **subtasks**: Child tasks
- **parentTask**: Parent task (if subtask)

### Timing

- **estimatedDuration**: Expected duration in seconds
- **actualDuration**: Actual duration in seconds
- **deadline**: Deadline for completion
- **startedAt**: When task started
- **completedAt**: When task finished

### Results

- **result**: Task output
- **error**: Error message if failed
- **retryCount**: Number of retry attempts
- **maxRetries**: Maximum retries allowed

## Examples

```yaml
$type: Task
taskType: generation
taskStatus: in-progress
taskPriority: high
assignedTo: content-agent
description: Generate blog post about AI trends
estimatedDuration: 300
deadline: 2025-10-02T15:00:00Z
```
\n\n
---
$id: https://schema.org.ai/Tool
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/tools
label: Tool
comment: A software tool or function that can be invoked by an AI agent
subClassOf:
  - http://schema.org.ai/vocab#AIEntity
  - http://schema.org/SoftwareApplication
properties:
  toolType: string
  parameters: object
  authentication: string
  rateLimit: integer
  apiEndpoint: string
  apiMethod: string
  requestSchema: string
  responseSchema: string
  examples: array
  requiresApproval: boolean
  dangerLevel: string
  timeout: integer
  caching: boolean
  parallel: boolean
  dependencies: array
---

# Tool

A **Tool** is a software function, API, or capability that AI agents can invoke to perform actions or retrieve information.

## Key Characteristics

- **Invocable**: Can be called programmatically
- **Parameterized**: Accepts structured inputs
- **Discoverable**: Schema-described for agent understanding
- **Governed**: Subject to policies and safety checks

## Properties

### Core Properties

- **toolType**: Category (api, function, code, search, database)
- **parameters**: Input parameters schema
- **authentication**: Auth method (api-key, oauth, none)
- **rateLimit**: Maximum requests per minute

### API Tools

- **apiEndpoint**: API URL
- **apiMethod**: HTTP method (GET, POST, etc.)
- **requestSchema**: JSON Schema for request
- **responseSchema**: JSON Schema for response

### Safety & Governance

- **requiresApproval**: Needs human approval
- **dangerLevel**: Risk level (safe, low, medium, high, critical)
- **timeout**: Max execution time in ms

### Performance

- **caching**: Results can be cached
- **parallel**: Can run in parallel
- **dependencies**: Required tools

## Examples

### Search Tool

```yaml
$type: Tool
toolType: search
parameters:
  query: string
  limit: integer
apiEndpoint: https://api.search.com/v1/search
apiMethod: POST
authentication: api-key
rateLimit: 60
requiresApproval: false
dangerLevel: safe
caching: true
parallel: true
```

### Database Query Tool

```yaml
$type: Tool
toolType: database
parameters:
  sql: string
authentication: oauth
requiresApproval: true
dangerLevel: high
timeout: 30000
caching: false
```
\n\n
---
$id: https://schema.org.ai/TrainingDataset
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: TrainingDataset
comment: A dataset used for training AI models
subClassOf:
  - http://schema.org/Dataset
  - http://schema.org.ai/vocab#AIEntity
properties:
  dataType: string
  size: integer
  format: string
  license: string
  splits: object
  preprocessing: array
  quality: number
  bias: object
---

# TrainingDataset

A **TrainingDataset** is a collection of data used to train AI/ML models.

## Properties

- **dataType**: Type of data (text, image, audio, tabular)
- **size**: Number of examples in dataset
- **format**: Data format (jsonl, parquet, csv)
- **license**: License for dataset usage
- **splits**: Train/validation/test splits
- **preprocessing**: Preprocessing steps applied
- **quality**: Quality score (0.0-1.0)
- **bias**: Known biases in the dataset

## Examples

```yaml
$type: TrainingDataset
name: Customer support conversations
dataType: text
size: 50000
format: jsonl
license: CC-BY-4.0
splits:
  train: 40000
  validation: 5000
  test: 5000
quality: 0.89
```

## Related Types

- **FineTuning**: Process using this dataset
- **Model**: Models trained on this dataset
\n\n
---
$id: https://schema.org.ai/ValidationDataset
$type: http://www.w3.org/2000/01/rdf-schema#Class
$context: http://schema.org.ai/context/ai-context.jsonld
label: ValidationDataset
comment: A dataset used for validating AI model performance
subClassOf:
  - http://schema.org/Dataset
  - http://schema.org.ai/vocab#AIEntity
properties:
  dataType: string
  size: integer
  format: string
  groundTruth: boolean
---

# ValidationDataset

A **ValidationDataset** is used to validate and tune AI model hyperparameters during training.

## Examples

```yaml
$type: ValidationDataset
name: Validation set for sentiment analysis
dataType: text
size: 5000
format: jsonl
groundTruth: true
```
\n\n

================================================================================\n# JSON-LD CONTEXTS\n================================================================================\n
\n## agents-context.jsonld\n
{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://schema.org.ai/vocab#",
    "@base": "http://schema.org.ai/",

    "schema": "http://schema.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",

    "Agent": {
      "@id": "ai:Agent",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": ["ai:AIEntity", "schema:SoftwareApplication"],
      "rdfs:comment": "An autonomous AI agent that can perform tasks, use tools, and make decisions"
    },

    "AgentTeam": {
      "@id": "ai:AgentTeam",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "ai:Agent",
      "rdfs:comment": "A coordinated team of AI agents working together toward common goals"
    },

    "Skill": {
      "@id": "ai:Skill",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "schema:Thing",
      "rdfs:comment": "A specific capability or skill that an agent can perform"
    },

    "Policy": {
      "@id": "ai:Policy",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "schema:Thing",
      "rdfs:comment": "A rule or guideline that governs agent behavior"
    },

    "role": {
      "@id": "ai:role",
      "@type": "xsd:string",
      "rdfs:comment": "The primary role or function of the agent"
    },

    "capabilities": {
      "@id": "ai:capabilities",
      "@type": "@id",
      "rdfs:comment": "List of capabilities or skills the agent possesses",
      "@container": "@list"
    },

    "tools": {
      "@id": "ai:tools",
      "@type": "@id",
      "rdfs:comment": "Tools available to the agent",
      "@container": "@list"
    },

    "model": {
      "@id": "ai:model",
      "@type": "@id",
      "rdfs:comment": "The AI model powering the agent"
    },

    "systemPrompt": {
      "@id": "ai:systemPrompt",
      "@type": "xsd:string",
      "rdfs:comment": "System prompt or instructions that define agent behavior"
    },

    "temperature": {
      "@id": "ai:temperature",
      "@type": "xsd:float",
      "rdfs:comment": "Temperature parameter for model sampling (0.0-2.0)"
    },

    "maxTokens": {
      "@id": "ai:maxTokens",
      "@type": "xsd:integer",
      "rdfs:comment": "Maximum number of tokens for model output"
    },

    "topP": {
      "@id": "ai:topP",
      "@type": "xsd:float",
      "rdfs:comment": "Top-p (nucleus sampling) parameter (0.0-1.0)"
    },

    "goals": {
      "@id": "ai:goals",
      "@type": "xsd:string",
      "rdfs:comment": "Goals or objectives the agent is designed to achieve",
      "@container": "@list"
    },

    "policies": {
      "@id": "ai:policies",
      "@type": "@id",
      "rdfs:comment": "Policies governing agent behavior",
      "@container": "@list"
    },

    "skills": {
      "@id": "ai:skills",
      "@type": "@id",
      "rdfs:comment": "Skills the agent possesses",
      "@container": "@list"
    },

    "team": {
      "@id": "ai:team",
      "@type": "@id",
      "rdfs:comment": "Team the agent belongs to"
    },

    "teammates": {
      "@id": "ai:teammates",
      "@type": "@id",
      "rdfs:comment": "Other agents in the team",
      "@container": "@list"
    },

    "coordinator": {
      "@id": "ai:coordinator",
      "@type": "@id",
      "rdfs:comment": "Agent responsible for coordinating the team"
    },

    "autonomyLevel": {
      "@id": "ai:autonomyLevel",
      "@type": "xsd:string",
      "rdfs:comment": "Level of autonomy (supervised, semi-autonomous, fully-autonomous)"
    },

    "humanInTheLoop": {
      "@id": "ai:humanInTheLoop",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether human oversight is required for agent actions"
    },

    "escalationPolicy": {
      "@id": "ai:escalationPolicy",
      "@type": "@id",
      "rdfs:comment": "Policy defining when to escalate to human or other agent"
    },

    "memoryType": {
      "@id": "ai:memoryType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of memory system (episodic, semantic, procedural)"
    },

    "contextWindow": {
      "@id": "ai:contextWindow",
      "@type": "xsd:integer",
      "rdfs:comment": "Size of the agent's context window in tokens"
    },

    "learningEnabled": {
      "@id": "ai:learningEnabled",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether the agent can learn from interactions"
    }
  }
}
\n\n
\n## ai-context.jsonld\n
{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://schema.org.ai/vocab#",
    "@base": "http://schema.org.ai/",

    "schema": "http://schema.org/",
    "mdxld": "http://mdxld.org/vocab#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",

    "agents": {
      "@id": "http://schema.org.ai/context/agents",
      "@type": "@id",
      "@context": "agents-context.jsonld"
    },

    "models": {
      "@id": "http://schema.org.ai/context/models",
      "@type": "@id",
      "@context": "models-context.jsonld"
    },

    "tools": {
      "@id": "http://schema.org.ai/context/tools",
      "@type": "@id",
      "@context": "tools-context.jsonld"
    },

    "memory": {
      "@id": "http://schema.org.ai/context/memory",
      "@type": "@id",
      "@context": "memory-context.jsonld"
    },

    "workflows": {
      "@id": "http://schema.org.ai/context/workflows",
      "@type": "@id",
      "@context": "workflows-context.jsonld"
    },

    "knowledge": {
      "@id": "http://schema.org.ai/context/knowledge",
      "@type": "@id",
      "@context": "knowledge-context.jsonld"
    },

    "AIEntity": {
      "@id": "ai:AIEntity",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "schema:Thing",
      "rdfs:comment": "Base class for all AI-native entities in schema.org.ai vocabulary"
    },

    "aiVersion": {
      "@id": "ai:aiVersion",
      "@type": "xsd:string",
      "rdfs:comment": "Version of the AI system or model"
    },

    "aiProvider": {
      "@id": "ai:aiProvider",
      "@type": "schema:Organization",
      "rdfs:comment": "Organization that provides the AI service or model"
    },

    "generatedBy": {
      "@id": "ai:generatedBy",
      "@type": "@id",
      "rdfs:comment": "The AI agent or model that generated this content"
    },

    "generatedAt": {
      "@id": "ai:generatedAt",
      "@type": "xsd:dateTime",
      "rdfs:comment": "Timestamp when content was generated by AI"
    },

    "humanVerified": {
      "@id": "ai:humanVerified",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether this AI-generated content has been verified by a human"
    },

    "confidenceScore": {
      "@id": "ai:confidenceScore",
      "@type": "xsd:float",
      "rdfs:comment": "Confidence score (0.0-1.0) for AI-generated content or predictions"
    }
  }
}
\n\n
\n## knowledge-context.jsonld\n
{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://schema.org.ai/vocab#",
    "@base": "http://schema.org.ai/",

    "schema": "http://schema.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",

    "KnowledgeBase": {
      "@id": "ai:KnowledgeBase",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": ["schema:Dataset", "ai:AIEntity"],
      "rdfs:comment": "A collection of structured knowledge that agents can query and reference"
    },

    "Prompt": {
      "@id": "ai:Prompt",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "ai:AIEntity",
      "rdfs:comment": "A prompt template for AI model interaction"
    },

    "PromptChain": {
      "@id": "ai:PromptChain",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "ai:Prompt",
      "rdfs:comment": "A sequence of prompts chained together for complex workflows"
    },

    "knowledgeType": {
      "@id": "ai:knowledgeType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of knowledge (factual, procedural, conceptual, meta-cognitive)"
    },

    "knowledgeSource": {
      "@id": "ai:knowledgeSource",
      "@type": "xsd:anyURI",
      "rdfs:comment": "Source of the knowledge (URL, document, database)"
    },

    "vectorStore": {
      "@id": "ai:vectorStore",
      "@type": "xsd:string",
      "rdfs:comment": "Vector database storing knowledge embeddings"
    },

    "indexStrategy": {
      "@id": "ai:indexStrategy",
      "@type": "xsd:string",
      "rdfs:comment": "Strategy for indexing knowledge (semantic, keyword, hybrid)"
    },

    "chunkSize": {
      "@id": "ai:chunkSize",
      "@type": "xsd:integer",
      "rdfs:comment": "Size of chunks for knowledge splitting"
    },

    "chunkOverlap": {
      "@id": "ai:chunkOverlap",
      "@type": "xsd:integer",
      "rdfs:comment": "Number of tokens to overlap between chunks"
    },

    "searchTopK": {
      "@id": "ai:searchTopK",
      "@type": "xsd:integer",
      "rdfs:comment": "Number of top results to retrieve in search"
    },

    "rerankingModel": {
      "@id": "ai:rerankingModel",
      "@type": "@id",
      "rdfs:comment": "Model used for re-ranking search results"
    },

    "promptTemplate": {
      "@id": "ai:promptTemplate",
      "@type": "xsd:string",
      "rdfs:comment": "Template string for the prompt with variable placeholders"
    },

    "promptVariables": {
      "@id": "ai:promptVariables",
      "@type": "xsd:string",
      "rdfs:comment": "Variables that can be interpolated into the prompt",
      "@container": "@list"
    },

    "promptType": {
      "@id": "ai:promptType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of prompt (system, user, assistant, few-shot, chain-of-thought)"
    },

    "fewShotExamples": {
      "@id": "ai:fewShotExamples",
      "@type": "@id",
      "rdfs:comment": "Examples for few-shot prompting",
      "@container": "@list"
    },

    "chainOfThought": {
      "@id": "ai:chainOfThought",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether prompt uses chain-of-thought reasoning"
    },

    "thoughtProcess": {
      "@id": "ai:thoughtProcess",
      "@type": "xsd:string",
      "rdfs:comment": "Reasoning steps in chain-of-thought"
    },

    "prompts": {
      "@id": "ai:prompts",
      "@type": "@id",
      "rdfs:comment": "Prompts in the chain",
      "@container": "@list"
    },

    "chainType": {
      "@id": "ai:chainType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of chain (sequential, parallel, conditional, recursive)"
    },

    "nextPrompt": {
      "@id": "ai:nextPrompt",
      "@type": "@id",
      "rdfs:comment": "Next prompt in the chain"
    },

    "previousPrompt": {
      "@id": "ai:previousPrompt",
      "@type": "@id",
      "rdfs:comment": "Previous prompt in the chain"
    },

    "branchCondition": {
      "@id": "ai:branchCondition",
      "@type": "xsd:string",
      "rdfs:comment": "Condition for branching to different prompts"
    },

    "stopCondition": {
      "@id": "ai:stopCondition",
      "@type": "xsd:string",
      "rdfs:comment": "Condition to stop the prompt chain"
    },

    "maxIterations": {
      "@id": "ai:maxIterations",
      "@type": "xsd:integer",
      "rdfs:comment": "Maximum iterations for recursive chains"
    },

    "aggregationStrategy": {
      "@id": "ai:aggregationStrategy",
      "@type": "xsd:string",
      "rdfs:comment": "How to aggregate results from chain (concat, merge, select)"
    }
  }
}
\n\n
\n## memory-context.jsonld\n
{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://schema.org.ai/vocab#",
    "@base": "http://schema.org.ai/",

    "schema": "http://schema.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",

    "Memory": {
      "@id": "ai:Memory",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "ai:AIEntity",
      "rdfs:comment": "Stored knowledge or experience that an agent can recall"
    },

    "Context": {
      "@id": "ai:Context",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "ai:AIEntity",
      "rdfs:comment": "Contextual information available to an agent during execution"
    },

    "Conversation": {
      "@id": "ai:Conversation",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": ["schema:Conversation", "ai:AIEntity"],
      "rdfs:comment": "A conversation thread between agents or between agent and human"
    },

    "Message": {
      "@id": "ai:Message",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": ["schema:Message", "ai:AIEntity"],
      "rdfs:comment": "A single message within a conversation"
    },

    "memoryType": {
      "@id": "ai:memoryType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of memory (short-term, long-term, episodic, semantic, procedural)"
    },

    "memoryStore": {
      "@id": "ai:memoryStore",
      "@type": "xsd:string",
      "rdfs:comment": "Storage backend for memory (vector-db, database, file, cache)"
    },

    "retrievalStrategy": {
      "@id": "ai:retrievalStrategy",
      "@type": "xsd:string",
      "rdfs:comment": "How memories are retrieved (semantic, temporal, relevance)"
    },

    "context": {
      "@id": "ai:context",
      "@type": "@id",
      "rdfs:comment": "Context object or information"
    },

    "contextType": {
      "@id": "ai:contextType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of context (user, session, conversation, global)"
    },

    "contextData": {
      "@id": "ai:contextData",
      "@type": "xsd:string",
      "rdfs:comment": "Context data as JSON object"
    },

    "conversation": {
      "@id": "ai:conversation",
      "@type": "@id",
      "rdfs:comment": "Conversation this message belongs to"
    },

    "messages": {
      "@id": "ai:messages",
      "@type": "@id",
      "rdfs:comment": "Messages in the conversation",
      "@container": "@list"
    },

    "participants": {
      "@id": "ai:participants",
      "@type": "@id",
      "rdfs:comment": "Agents or users participating in conversation",
      "@container": "@list"
    },

    "messageRole": {
      "@id": "ai:messageRole",
      "@type": "xsd:string",
      "rdfs:comment": "Role of message sender (system, user, assistant, function)"
    },

    "messageContent": {
      "@id": "ai:messageContent",
      "@type": "xsd:string",
      "rdfs:comment": "Content of the message"
    },

    "functionCall": {
      "@id": "ai:functionCall",
      "@type": "xsd:string",
      "rdfs:comment": "Function call details if message is a function invocation"
    },

    "functionResult": {
      "@id": "ai:functionResult",
      "@type": "xsd:string",
      "rdfs:comment": "Result of function call if message is a function response"
    },

    "tokenCount": {
      "@id": "ai:tokenCount",
      "@type": "xsd:integer",
      "rdfs:comment": "Number of tokens in the message"
    },

    "timestamp": {
      "@id": "ai:timestamp",
      "@type": "xsd:dateTime",
      "rdfs:comment": "Timestamp when message was created"
    },

    "inReplyTo": {
      "@id": "ai:inReplyTo",
      "@type": "@id",
      "rdfs:comment": "Message this is a reply to"
    },

    "attachments": {
      "@id": "ai:attachments",
      "@type": "@id",
      "rdfs:comment": "Files or data attached to the message",
      "@container": "@list"
    },

    "relevanceScore": {
      "@id": "ai:relevanceScore",
      "@type": "xsd:float",
      "rdfs:comment": "Relevance score for memory retrieval (0.0-1.0)"
    },

    "decayRate": {
      "@id": "ai:decayRate",
      "@type": "xsd:float",
      "rdfs:comment": "Rate at which memory relevance decays over time"
    },

    "accessCount": {
      "@id": "ai:accessCount",
      "@type": "xsd:integer",
      "rdfs:comment": "Number of times this memory has been accessed"
    },

    "lastAccessed": {
      "@id": "ai:lastAccessed",
      "@type": "xsd:dateTime",
      "rdfs:comment": "Timestamp when memory was last accessed"
    }
  }
}
\n\n
\n## models-context.jsonld\n
{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://schema.org.ai/vocab#",
    "@base": "http://schema.org.ai/",

    "schema": "http://schema.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",

    "Model": {
      "@id": "ai:Model",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": ["ai:AIEntity", "schema:SoftwareApplication"],
      "rdfs:comment": "An AI/ML model used for inference, generation, or embedding"
    },

    "Embedding": {
      "@id": "ai:Embedding",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "ai:Model",
      "rdfs:comment": "A model that converts text or data into vector embeddings"
    },

    "FineTuning": {
      "@id": "ai:FineTuning",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": "schema:Action",
      "rdfs:comment": "Process of fine-tuning a model on custom data"
    },

    "modelType": {
      "@id": "ai:modelType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of model (llm, embedding, vision, audio, multimodal)"
    },

    "modelFamily": {
      "@id": "ai:modelFamily",
      "@type": "xsd:string",
      "rdfs:comment": "Model family (e.g., GPT, Claude, Llama, Gemini)"
    },

    "provider": {
      "@id": "ai:provider",
      "@type": "schema:Organization",
      "rdfs:comment": "Organization providing the model"
    },

    "contextWindowSize": {
      "@id": "ai:contextWindowSize",
      "@type": "xsd:integer",
      "rdfs:comment": "Maximum context window size in tokens"
    },

    "inputTokenLimit": {
      "@id": "ai:inputTokenLimit",
      "@type": "xsd:integer",
      "rdfs:comment": "Maximum input tokens accepted by the model"
    },

    "outputTokenLimit": {
      "@id": "ai:outputTokenLimit",
      "@type": "xsd:integer",
      "rdfs:comment": "Maximum output tokens the model can generate"
    },

    "trainingData": {
      "@id": "ai:trainingData",
      "@type": "@id",
      "rdfs:comment": "Dataset used to train the model"
    },

    "trainingCutoff": {
      "@id": "ai:trainingCutoff",
      "@type": "xsd:date",
      "rdfs:comment": "Date when model training data was cut off"
    },

    "finetuning": {
      "@id": "ai:finetuning",
      "@type": "@id",
      "rdfs:comment": "Fine-tuning configuration or process applied to base model"
    },

    "baseModel": {
      "@id": "ai:baseModel",
      "@type": "@id",
      "rdfs:comment": "Base model that was fine-tuned"
    },

    "embedding": {
      "@id": "ai:embedding",
      "@type": "@id",
      "rdfs:comment": "Embedding model or vector representation"
    },

    "embeddingDimensions": {
      "@id": "ai:embeddingDimensions",
      "@type": "xsd:integer",
      "rdfs:comment": "Number of dimensions in embedding vectors"
    },

    "embeddingModel": {
      "@id": "ai:embeddingModel",
      "@type": "@id",
      "rdfs:comment": "Model used to generate embeddings"
    },

    "multimodal": {
      "@id": "ai:multimodal",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether model supports multiple modalities (text, image, audio)"
    },

    "supportedModalities": {
      "@id": "ai:supportedModalities",
      "@type": "xsd:string",
      "rdfs:comment": "Modalities supported by the model",
      "@container": "@list"
    },

    "visionEnabled": {
      "@id": "ai:visionEnabled",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether model can process images"
    },

    "audioEnabled": {
      "@id": "ai:audioEnabled",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether model can process audio"
    },

    "functionCalling": {
      "@id": "ai:functionCalling",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether model supports function/tool calling"
    },

    "structuredOutput": {
      "@id": "ai:structuredOutput",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether model can generate structured JSON output"
    },

    "reasoningModel": {
      "@id": "ai:reasoningModel",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether model uses chain-of-thought reasoning"
    },

    "costPerInputToken": {
      "@id": "ai:costPerInputToken",
      "@type": "xsd:float",
      "rdfs:comment": "Cost in USD per 1000 input tokens"
    },

    "costPerOutputToken": {
      "@id": "ai:costPerOutputToken",
      "@type": "xsd:float",
      "rdfs:comment": "Cost in USD per 1000 output tokens"
    },

    "latencyMs": {
      "@id": "ai:latencyMs",
      "@type": "xsd:integer",
      "rdfs:comment": "Average latency in milliseconds"
    },

    "tokensPerSecond": {
      "@id": "ai:tokensPerSecond",
      "@type": "xsd:integer",
      "rdfs:comment": "Average tokens generated per second"
    }
  }
}
\n\n
\n## tools-context.jsonld\n
{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://schema.org.ai/vocab#",
    "@base": "http://schema.org.ai/",

    "schema": "http://schema.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",

    "Tool": {
      "@id": "ai:Tool",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": ["ai:AIEntity", "schema:SoftwareApplication"],
      "rdfs:comment": "A software tool or function that can be invoked by an AI agent"
    },

    "toolType": {
      "@id": "ai:toolType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of tool (api, function, code, search, database)"
    },

    "parameters": {
      "@id": "ai:parameters",
      "@type": "@id",
      "rdfs:comment": "Input parameters accepted by the tool"
    },

    "authentication": {
      "@id": "ai:authentication",
      "@type": "xsd:string",
      "rdfs:comment": "Authentication method required (api-key, oauth, none)"
    },

    "rateLimit": {
      "@id": "ai:rateLimit",
      "@type": "xsd:integer",
      "rdfs:comment": "Maximum requests per minute"
    },

    "apiEndpoint": {
      "@id": "ai:apiEndpoint",
      "@type": "xsd:anyURI",
      "rdfs:comment": "API endpoint URL for the tool"
    },

    "apiMethod": {
      "@id": "ai:apiMethod",
      "@type": "xsd:string",
      "rdfs:comment": "HTTP method (GET, POST, PUT, DELETE, PATCH)"
    },

    "apiHeaders": {
      "@id": "ai:apiHeaders",
      "@type": "xsd:string",
      "rdfs:comment": "Required HTTP headers as JSON object"
    },

    "requestSchema": {
      "@id": "ai:requestSchema",
      "@type": "xsd:string",
      "rdfs:comment": "JSON Schema for request body"
    },

    "responseSchema": {
      "@id": "ai:responseSchema",
      "@type": "xsd:string",
      "rdfs:comment": "JSON Schema for response body"
    },

    "examples": {
      "@id": "ai:examples",
      "@type": "@id",
      "rdfs:comment": "Example usages of the tool",
      "@container": "@list"
    },

    "requiresApproval": {
      "@id": "ai:requiresApproval",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether tool execution requires human approval"
    },

    "dangerLevel": {
      "@id": "ai:dangerLevel",
      "@type": "xsd:string",
      "rdfs:comment": "Risk level (safe, low, medium, high, critical)"
    },

    "timeout": {
      "@id": "ai:timeout",
      "@type": "xsd:integer",
      "rdfs:comment": "Maximum execution time in milliseconds"
    },

    "retryPolicy": {
      "@id": "ai:retryPolicy",
      "@type": "xsd:string",
      "rdfs:comment": "Retry policy for failed executions (none, exponential, fixed)"
    },

    "caching": {
      "@id": "ai:caching",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether tool results can be cached"
    },

    "cacheDuration": {
      "@id": "ai:cacheDuration",
      "@type": "xsd:integer",
      "rdfs:comment": "Cache duration in seconds"
    },

    "parallel": {
      "@id": "ai:parallel",
      "@type": "xsd:boolean",
      "rdfs:comment": "Whether tool can be called in parallel"
    },

    "dependencies": {
      "@id": "ai:dependencies",
      "@type": "@id",
      "rdfs:comment": "Other tools this tool depends on",
      "@container": "@list"
    }
  }
}
\n\n
\n## workflows-context.jsonld\n
{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://schema.org.ai/vocab#",
    "@base": "http://schema.org.ai/",

    "schema": "http://schema.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",

    "Task": {
      "@id": "ai:Task",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": ["schema:Action", "ai:AIEntity"],
      "rdfs:comment": "A discrete unit of work to be performed by an agent or system"
    },

    "Plan": {
      "@id": "ai:Plan",
      "@type": "rdfs:Class",
      "rdfs:subClassOf": ["schema:PlanAction", "ai:AIEntity"],
      "rdfs:comment": "A structured plan for achieving a goal through multiple tasks"
    },

    "taskType": {
      "@id": "ai:taskType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of task (generation, analysis, transformation, execution)"
    },

    "taskStatus": {
      "@id": "ai:taskStatus",
      "@type": "xsd:string",
      "rdfs:comment": "Current status (pending, in-progress, completed, failed, cancelled)"
    },

    "taskPriority": {
      "@id": "ai:taskPriority",
      "@type": "xsd:string",
      "rdfs:comment": "Priority level (low, medium, high, critical)"
    },

    "assignedTo": {
      "@id": "ai:assignedTo",
      "@type": "@id",
      "rdfs:comment": "Agent assigned to perform the task"
    },

    "dependencies": {
      "@id": "ai:dependencies",
      "@type": "@id",
      "rdfs:comment": "Tasks that must be completed before this task",
      "@container": "@list"
    },

    "subtasks": {
      "@id": "ai:subtasks",
      "@type": "@id",
      "rdfs:comment": "Subtasks that make up this task",
      "@container": "@list"
    },

    "parentTask": {
      "@id": "ai:parentTask",
      "@type": "@id",
      "rdfs:comment": "Parent task this is a subtask of"
    },

    "estimatedDuration": {
      "@id": "ai:estimatedDuration",
      "@type": "xsd:integer",
      "rdfs:comment": "Estimated duration in seconds"
    },

    "actualDuration": {
      "@id": "ai:actualDuration",
      "@type": "xsd:integer",
      "rdfs:comment": "Actual duration in seconds"
    },

    "deadline": {
      "@id": "ai:deadline",
      "@type": "xsd:dateTime",
      "rdfs:comment": "Deadline for task completion"
    },

    "startedAt": {
      "@id": "ai:startedAt",
      "@type": "xsd:dateTime",
      "rdfs:comment": "Timestamp when task started"
    },

    "completedAt": {
      "@id": "ai:completedAt",
      "@type": "xsd:dateTime",
      "rdfs:comment": "Timestamp when task completed"
    },

    "result": {
      "@id": "ai:result",
      "@type": "xsd:string",
      "rdfs:comment": "Result or output of the task"
    },

    "error": {
      "@id": "ai:error",
      "@type": "xsd:string",
      "rdfs:comment": "Error message if task failed"
    },

    "retryCount": {
      "@id": "ai:retryCount",
      "@type": "xsd:integer",
      "rdfs:comment": "Number of times task has been retried"
    },

    "maxRetries": {
      "@id": "ai:maxRetries",
      "@type": "xsd:integer",
      "rdfs:comment": "Maximum number of retry attempts"
    },

    "plan": {
      "@id": "ai:plan",
      "@type": "@id",
      "rdfs:comment": "Plan this task belongs to"
    },

    "planType": {
      "@id": "ai:planType",
      "@type": "xsd:string",
      "rdfs:comment": "Type of plan (sequential, parallel, conditional, iterative)"
    },

    "planStatus": {
      "@id": "ai:planStatus",
      "@type": "xsd:string",
      "rdfs:comment": "Current status of plan (draft, active, paused, completed, failed)"
    },

    "steps": {
      "@id": "ai:steps",
      "@type": "@id",
      "rdfs:comment": "Steps or tasks in the plan",
      "@container": "@list"
    },

    "currentStep": {
      "@id": "ai:currentStep",
      "@type": "@id",
      "rdfs:comment": "Current step being executed"
    },

    "completedSteps": {
      "@id": "ai:completedSteps",
      "@type": "@id",
      "rdfs:comment": "Steps that have been completed",
      "@container": "@list"
    },

    "objective": {
      "@id": "ai:objective",
      "@type": "xsd:string",
      "rdfs:comment": "Goal or objective the plan is designed to achieve"
    },

    "successCriteria": {
      "@id": "ai:successCriteria",
      "@type": "xsd:string",
      "rdfs:comment": "Criteria for determining plan success",
      "@container": "@list"
    },

    "rollbackStrategy": {
      "@id": "ai:rollbackStrategy",
      "@type": "xsd:string",
      "rdfs:comment": "Strategy for rolling back if plan fails"
    }
  }
}
\n\n
