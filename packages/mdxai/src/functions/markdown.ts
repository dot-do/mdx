import { generateText } from 'ai'
import { createAIModel } from '../ai'
import { unified } from 'unified'
import remarkParse from 'remark-parse'
import { parseTemplate, createUnifiedFunction } from '../utils/template.js'

/**
 * Markdown template literal function for generating markdown content with AI
 *
 * Usage: await markdown`Write a guide about ${topic}`
 */
export type MarkdownTemplateFn = (template: TemplateStringsArray, ...values: any[]) => Promise<MarkdownResult>

/**
 * Result object containing both raw markdown and parsed AST
 */
export interface MarkdownResult {
  /** Raw markdown string generated by AI */
  markdown: string
  /** Parsed markdown AST (MDAST) */
  mdast: any
}

/**
 * Core markdown function that takes a prompt and returns markdown with AST
 */
async function markdownCore(prompt: string): Promise<MarkdownResult> {
  const result = await generateText({
    model: createAIModel()('gpt-4o'),
    system: 'You are a helpful assistant that responds in well-formatted markdown. Use proper markdown syntax including headers, lists, code blocks, links, and other formatting as appropriate for the content.',
    prompt,
  })

  const markdown = result.text

  // Parse the markdown into an AST using unified and remark-parse
  const processor = unified().use(remarkParse)
  const mdast = processor.parse(markdown)

  return {
    markdown,
    mdast,
  }
}

export const markdown = createUnifiedFunction<Promise<MarkdownResult>>(
  (prompt: string, options: Record<string, any>) => {
    return markdownCore(prompt);
  }
);  