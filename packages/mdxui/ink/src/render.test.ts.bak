import { describe, it, expect, vi } from 'vitest';
import { compileMdx } from './render';
import React from 'react';
import * as ink from 'ink';

// Set up spies for React methods
const createElementSpy = vi.fn();
vi.spyOn(React, 'createElement').mockImplementation(createElementSpy);

const isValidElementSpy = vi.fn().mockReturnValue(true);
vi.spyOn(React, 'isValidElement').mockImplementation(isValidElementSpy);

const cloneElementSpy = vi.fn();
vi.spyOn(React, 'cloneElement').mockImplementation(cloneElementSpy);

// Set up spy for ink.render
const waitUntilExitSpy = vi.fn().mockResolvedValue(undefined);
const renderSpy = vi.fn().mockReturnValue({ waitUntilExit: waitUntilExitSpy });
vi.spyOn(ink, 'render').mockImplementation(renderSpy);

describe('compileMdx', () => {
  it('should handle MDX content with export default', async () => {
    const mdxContent = `
      export default function Test({ name }) {
        return <div>Hello {name}</div>;
      }
    `;
    
    const Component = await compileMdx(mdxContent, { name: 'World' });
    expect(Component).toBeDefined();
  });
  
  it('should handle errors gracefully', async () => {
    const mdxContent = `
      This is invalid MDX content
      export default function Test({ name }) {
        return <div>Hello {name}</div
      }
    `;
    
    const Component = await compileMdx(mdxContent, { name: 'World' });
    expect(Component).toBeDefined();
  });
});
