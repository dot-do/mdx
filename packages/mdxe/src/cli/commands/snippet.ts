import path from 'node:path'
import fs from 'node:fs/promises'
import fse from 'fs-extra'

/**
 * Snippet generation options
 */
export interface SnippetOptions {
  name?: string
  minify?: boolean
  output?: string
}

/**
 * Create a Cloudflare Snippet from MDXE project
 */
export async function runSnippetCommand(options: SnippetOptions = {}) {
  const { name, minify = true, output = '.mdxe/snippet.js' } = options
  const cwd = process.cwd()

  console.log('üì¶ Creating Cloudflare Snippet...')

  try {
    const snippetName = name || `${path.basename(cwd)}-snippet`

    // 1. Analyze MDX content structure
    const contentDir = path.join(cwd, 'content')
    const routes = await analyzeContentStructure(contentDir)

    console.log(`üìÑ Analyzed ${routes.length} routes from content/`)

    // 2. Generate optimized snippet code
    const snippetCode = generateSnippetCode(snippetName, routes, { minify })

    // 3. Write to output file
    const outputPath = path.join(cwd, output)
    await fse.ensureDir(path.dirname(outputPath))
    await fs.writeFile(outputPath, snippetCode)

    console.log(`‚úÖ Snippet created: ${outputPath}`)
    console.log(`üìä Size: ${Buffer.from(snippetCode).length} bytes`)

    // 4. Generate deployment instructions
    await generateDeploymentGuide(snippetName, outputPath, cwd)

    // 5. Generate snippet metadata
    const metadata = {
      name: snippetName,
      version: '1.0.0',
      routes: routes.map((r) => r.path),
      size: Buffer.from(snippetCode).length,
      createdAt: new Date().toISOString(),
    }

    const metadataPath = path.join(cwd, '.mdxe', 'snippet-metadata.json')
    await fse.ensureDir(path.dirname(metadataPath))
    await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2))

    console.log(`üìã Metadata saved: ${metadataPath}`)
  } catch (error) {
    console.error('‚ùå Failed to create snippet:', error)
    process.exit(1)
  }
}

/**
 * Analyze content structure to extract routes
 */
async function analyzeContentStructure(contentDir: string): Promise<Array<{ path: string; file: string; title?: string }>> {
  const routes: Array<{ path: string; file: string; title?: string }> = []

  try {
    const files = await findMarkdownFiles(contentDir)

    for (const file of files) {
      const relativePath = path.relative(contentDir, file)
      const routePath = '/' + relativePath.replace(/\.(md|mdx)$/, '').replace(/\/index$/, '') || '/'

      // Extract title from frontmatter if available
      const content = await fs.readFile(file, 'utf-8')
      const titleMatch = content.match(/^---\s*\ntitle:\s*["']?([^"'\n]+)["']?\s*\n/m)
      const title = titleMatch?.[1]

      routes.push({
        path: routePath,
        file: relativePath,
        title,
      })
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è  Could not analyze content structure:', error)
  }

  return routes
}

/**
 * Find all markdown files recursively
 */
async function findMarkdownFiles(dir: string): Promise<string[]> {
  const files: string[] = []

  try {
    const entries = await fs.readdir(dir, { withFileTypes: true })

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name)

      if (entry.isDirectory()) {
        const subFiles = await findMarkdownFiles(fullPath)
        files.push(...subFiles)
      } else if (entry.name.match(/\.(md|mdx)$/i)) {
        files.push(fullPath)
      }
    }
  } catch (error) {
    // Directory doesn't exist
  }

  return files
}

/**
 * Generate optimized snippet code
 */
function generateSnippetCode(
  name: string,
  routes: Array<{ path: string; file: string; title?: string }>,
  options: { minify: boolean }
): string {
  const { minify } = options

  // Create route map for efficient lookup
  const routeMap = routes.reduce(
    (acc, route) => {
      acc[route.path] = route
      return acc
    },
    {} as Record<string, { path: string; file: string; title?: string }>
  )

  // Generate snippet code
  const code = `
// Cloudflare Snippet: ${name}
// Generated by mdxe
// Routes: ${routes.length}

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request))
})

// Route map
const routes = ${JSON.stringify(routeMap, null, minify ? 0 : 2)}

async function handleRequest(request) {
  const url = new URL(request.url)
  const pathname = url.pathname

  // Lookup route
  const route = routes[pathname]

  if (route) {
    // Serve MDX content metadata
    return new Response(JSON.stringify({
      path: route.path,
      title: route.title || 'Untitled',
      file: route.file
    }), {
      headers: {
        'content-type': 'application/json',
        'x-snippet-name': '${name}',
        'cache-control': 'public, max-age=3600'
      }
    })
  }

  // 404 response
  return new Response('Not found', {
    status: 404,
    headers: { 'content-type': 'text/plain' }
  })
}

// Health check endpoint
if (addEventListener('scheduled')) {
  addEventListener('scheduled', event => {
    console.log('Snippet ${name} is healthy')
  })
}
`

  // Minify if requested (basic minification)
  if (minify) {
    return code
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => !line.startsWith('//'))
      .join('')
      .replace(/\s+/g, ' ')
      .trim()
  }

  return code.trim()
}

/**
 * Generate deployment guide
 */
async function generateDeploymentGuide(snippetName: string, snippetPath: string, cwd: string): Promise<void> {
  const guide = `
# Cloudflare Snippet Deployment Guide

## Snippet: ${snippetName}

### Manual Deployment Steps

1. **Go to Cloudflare Dashboard**
   - Navigate to: Workers & Pages > Snippets
   - Click "Create Snippet"

2. **Configure Snippet**
   - Name: \`${snippetName}\`
   - Code: Paste contents from \`${path.relative(cwd, snippetPath)}\`

3. **Set Triggers**
   - URL Pattern: \`/*\` (or specific paths)
   - Zone: Select your domain
   - Placement: Before or After cache

4. **Enable & Deploy**
   - Click "Save and Deploy"
   - Test the snippet on your domain

### API Deployment (Alternative)

\`\`\`bash
# Using Cloudflare API
curl -X POST "https://api.cloudflare.com/client/v4/accounts/{account_id}/snippets" \\
  -H "Authorization: Bearer {api_token}" \\
  -H "Content-Type: application/json" \\
  --data '{
    "name": "${snippetName}",
    "code": "$(cat ${path.relative(cwd, snippetPath)})"
  }'
\`\`\`

### Testing

After deployment, test the snippet:

\`\`\`bash
curl https://yourdomain.com/
\`\`\`

### Monitoring

- View snippet logs in Cloudflare Dashboard
- Monitor performance metrics
- Track error rates

---

Generated by mdxe on ${new Date().toISOString()}
`

  const guidePath = path.join(cwd, '.mdxe', 'DEPLOYMENT.md')
  await fse.ensureDir(path.dirname(guidePath))
  await fs.writeFile(guidePath, guide.trim())

  console.log(`üìñ Deployment guide created: ${guidePath}`)
}
